// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/20/2018 19:36:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    IR_v1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module IR_v1_vlg_sample_tst(
	clk,
	instruccion,
	irwrite,
	oeir,
	sampler_tx
);
input  clk;
input [15:0] instruccion;
input  irwrite;
input  oeir;
output sampler_tx;

reg sample;
time current_time;
always @(clk or instruccion or irwrite or oeir)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module IR_v1_vlg_check_tst (
	opcode,
	outjump,
	outrd,
	outrs,
	outrt,
	sampler_rx
);
input [3:0] opcode;
input [7:0] outjump;
input [7:0] outrd;
input [7:0] outrs;
input [7:0] outrt;
input sampler_rx;

reg [3:0] opcode_expected;
reg [7:0] outjump_expected;
reg [7:0] outrd_expected;
reg [7:0] outrs_expected;
reg [7:0] outrt_expected;

reg [3:0] opcode_prev;
reg [7:0] outjump_prev;
reg [7:0] outrd_prev;
reg [7:0] outrs_prev;
reg [7:0] outrt_prev;

reg [3:0] opcode_expected_prev;
reg [7:0] outjump_expected_prev;
reg [7:0] outrd_expected_prev;
reg [7:0] outrs_expected_prev;
reg [7:0] outrt_expected_prev;

reg [3:0] last_opcode_exp;
reg [7:0] last_outjump_exp;
reg [7:0] last_outrd_exp;
reg [7:0] last_outrs_exp;
reg [7:0] last_outrt_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	opcode_prev = opcode;
	outjump_prev = outjump;
	outrd_prev = outrd;
	outrs_prev = outrs;
	outrt_prev = outrt;
end

// update expected /o prevs

always @(trigger)
begin
	opcode_expected_prev = opcode_expected;
	outjump_expected_prev = outjump_expected;
	outrd_expected_prev = outrd_expected;
	outrs_expected_prev = outrs_expected;
	outrt_expected_prev = outrt_expected;
end


// expected opcode[ 3 ]
initial
begin
	opcode_expected[3] = 1'bX;
end 
// expected opcode[ 2 ]
initial
begin
	opcode_expected[2] = 1'bX;
end 
// expected opcode[ 1 ]
initial
begin
	opcode_expected[1] = 1'bX;
end 
// expected opcode[ 0 ]
initial
begin
	opcode_expected[0] = 1'bX;
end 
// expected outjump[ 7 ]
initial
begin
	outjump_expected[7] = 1'bX;
end 
// expected outjump[ 6 ]
initial
begin
	outjump_expected[6] = 1'bX;
end 
// expected outjump[ 5 ]
initial
begin
	outjump_expected[5] = 1'bX;
end 
// expected outjump[ 4 ]
initial
begin
	outjump_expected[4] = 1'bX;
end 
// expected outjump[ 3 ]
initial
begin
	outjump_expected[3] = 1'bX;
end 
// expected outjump[ 2 ]
initial
begin
	outjump_expected[2] = 1'bX;
end 
// expected outjump[ 1 ]
initial
begin
	outjump_expected[1] = 1'bX;
end 
// expected outjump[ 0 ]
initial
begin
	outjump_expected[0] = 1'bX;
end 
// expected outrd[ 7 ]
initial
begin
	outrd_expected[7] = 1'bX;
end 
// expected outrd[ 6 ]
initial
begin
	outrd_expected[6] = 1'bX;
end 
// expected outrd[ 5 ]
initial
begin
	outrd_expected[5] = 1'bX;
end 
// expected outrd[ 4 ]
initial
begin
	outrd_expected[4] = 1'bX;
end 
// expected outrd[ 3 ]
initial
begin
	outrd_expected[3] = 1'bX;
end 
// expected outrd[ 2 ]
initial
begin
	outrd_expected[2] = 1'bX;
end 
// expected outrd[ 1 ]
initial
begin
	outrd_expected[1] = 1'bX;
end 
// expected outrd[ 0 ]
initial
begin
	outrd_expected[0] = 1'bX;
end 
// expected outrs[ 7 ]
initial
begin
	outrs_expected[7] = 1'bX;
end 
// expected outrs[ 6 ]
initial
begin
	outrs_expected[6] = 1'bX;
end 
// expected outrs[ 5 ]
initial
begin
	outrs_expected[5] = 1'bX;
end 
// expected outrs[ 4 ]
initial
begin
	outrs_expected[4] = 1'bX;
end 
// expected outrs[ 3 ]
initial
begin
	outrs_expected[3] = 1'bX;
end 
// expected outrs[ 2 ]
initial
begin
	outrs_expected[2] = 1'bX;
end 
// expected outrs[ 1 ]
initial
begin
	outrs_expected[1] = 1'bX;
end 
// expected outrs[ 0 ]
initial
begin
	outrs_expected[0] = 1'bX;
end 
// expected outrt[ 7 ]
initial
begin
	outrt_expected[7] = 1'bX;
end 
// expected outrt[ 6 ]
initial
begin
	outrt_expected[6] = 1'bX;
end 
// expected outrt[ 5 ]
initial
begin
	outrt_expected[5] = 1'bX;
end 
// expected outrt[ 4 ]
initial
begin
	outrt_expected[4] = 1'bX;
end 
// expected outrt[ 3 ]
initial
begin
	outrt_expected[3] = 1'bX;
end 
// expected outrt[ 2 ]
initial
begin
	outrt_expected[2] = 1'bX;
end 
// expected outrt[ 1 ]
initial
begin
	outrt_expected[1] = 1'bX;
end 
// expected outrt[ 0 ]
initial
begin
	outrt_expected[0] = 1'bX;
end 
// generate trigger
always @(opcode_expected or opcode or outjump_expected or outjump or outrd_expected or outrd or outrs_expected or outrs or outrt_expected or outrt)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected opcode = %b | expected outjump = %b | expected outrd = %b | expected outrs = %b | expected outrt = %b | ",opcode_expected_prev,outjump_expected_prev,outrd_expected_prev,outrs_expected_prev,outrt_expected_prev);
	$display("| real opcode = %b | real outjump = %b | real outrd = %b | real outrs = %b | real outrt = %b | ",opcode_prev,outjump_prev,outrd_prev,outrs_prev,outrt_prev);
`endif
	if (
		( opcode_expected_prev[0] !== 1'bx ) && ( opcode_prev[0] !== opcode_expected_prev[0] )
		&& ((opcode_expected_prev[0] !== last_opcode_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opcode_exp[0] = opcode_expected_prev[0];
	end
	if (
		( opcode_expected_prev[1] !== 1'bx ) && ( opcode_prev[1] !== opcode_expected_prev[1] )
		&& ((opcode_expected_prev[1] !== last_opcode_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opcode_exp[1] = opcode_expected_prev[1];
	end
	if (
		( opcode_expected_prev[2] !== 1'bx ) && ( opcode_prev[2] !== opcode_expected_prev[2] )
		&& ((opcode_expected_prev[2] !== last_opcode_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opcode_exp[2] = opcode_expected_prev[2];
	end
	if (
		( opcode_expected_prev[3] !== 1'bx ) && ( opcode_prev[3] !== opcode_expected_prev[3] )
		&& ((opcode_expected_prev[3] !== last_opcode_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_opcode_exp[3] = opcode_expected_prev[3];
	end
	if (
		( outjump_expected_prev[0] !== 1'bx ) && ( outjump_prev[0] !== outjump_expected_prev[0] )
		&& ((outjump_expected_prev[0] !== last_outjump_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outjump[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outjump_expected_prev);
		$display ("     Real value = %b", outjump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outjump_exp[0] = outjump_expected_prev[0];
	end
	if (
		( outjump_expected_prev[1] !== 1'bx ) && ( outjump_prev[1] !== outjump_expected_prev[1] )
		&& ((outjump_expected_prev[1] !== last_outjump_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outjump[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outjump_expected_prev);
		$display ("     Real value = %b", outjump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outjump_exp[1] = outjump_expected_prev[1];
	end
	if (
		( outjump_expected_prev[2] !== 1'bx ) && ( outjump_prev[2] !== outjump_expected_prev[2] )
		&& ((outjump_expected_prev[2] !== last_outjump_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outjump[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outjump_expected_prev);
		$display ("     Real value = %b", outjump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outjump_exp[2] = outjump_expected_prev[2];
	end
	if (
		( outjump_expected_prev[3] !== 1'bx ) && ( outjump_prev[3] !== outjump_expected_prev[3] )
		&& ((outjump_expected_prev[3] !== last_outjump_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outjump[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outjump_expected_prev);
		$display ("     Real value = %b", outjump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outjump_exp[3] = outjump_expected_prev[3];
	end
	if (
		( outjump_expected_prev[4] !== 1'bx ) && ( outjump_prev[4] !== outjump_expected_prev[4] )
		&& ((outjump_expected_prev[4] !== last_outjump_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outjump[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outjump_expected_prev);
		$display ("     Real value = %b", outjump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outjump_exp[4] = outjump_expected_prev[4];
	end
	if (
		( outjump_expected_prev[5] !== 1'bx ) && ( outjump_prev[5] !== outjump_expected_prev[5] )
		&& ((outjump_expected_prev[5] !== last_outjump_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outjump[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outjump_expected_prev);
		$display ("     Real value = %b", outjump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outjump_exp[5] = outjump_expected_prev[5];
	end
	if (
		( outjump_expected_prev[6] !== 1'bx ) && ( outjump_prev[6] !== outjump_expected_prev[6] )
		&& ((outjump_expected_prev[6] !== last_outjump_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outjump[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outjump_expected_prev);
		$display ("     Real value = %b", outjump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outjump_exp[6] = outjump_expected_prev[6];
	end
	if (
		( outjump_expected_prev[7] !== 1'bx ) && ( outjump_prev[7] !== outjump_expected_prev[7] )
		&& ((outjump_expected_prev[7] !== last_outjump_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outjump[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outjump_expected_prev);
		$display ("     Real value = %b", outjump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outjump_exp[7] = outjump_expected_prev[7];
	end
	if (
		( outrd_expected_prev[0] !== 1'bx ) && ( outrd_prev[0] !== outrd_expected_prev[0] )
		&& ((outrd_expected_prev[0] !== last_outrd_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrd_expected_prev);
		$display ("     Real value = %b", outrd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outrd_exp[0] = outrd_expected_prev[0];
	end
	if (
		( outrd_expected_prev[1] !== 1'bx ) && ( outrd_prev[1] !== outrd_expected_prev[1] )
		&& ((outrd_expected_prev[1] !== last_outrd_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrd_expected_prev);
		$display ("     Real value = %b", outrd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outrd_exp[1] = outrd_expected_prev[1];
	end
	if (
		( outrd_expected_prev[2] !== 1'bx ) && ( outrd_prev[2] !== outrd_expected_prev[2] )
		&& ((outrd_expected_prev[2] !== last_outrd_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrd_expected_prev);
		$display ("     Real value = %b", outrd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outrd_exp[2] = outrd_expected_prev[2];
	end
	if (
		( outrd_expected_prev[3] !== 1'bx ) && ( outrd_prev[3] !== outrd_expected_prev[3] )
		&& ((outrd_expected_prev[3] !== last_outrd_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrd_expected_prev);
		$display ("     Real value = %b", outrd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outrd_exp[3] = outrd_expected_prev[3];
	end
	if (
		( outrd_expected_prev[4] !== 1'bx ) && ( outrd_prev[4] !== outrd_expected_prev[4] )
		&& ((outrd_expected_prev[4] !== last_outrd_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrd_expected_prev);
		$display ("     Real value = %b", outrd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outrd_exp[4] = outrd_expected_prev[4];
	end
	if (
		( outrd_expected_prev[5] !== 1'bx ) && ( outrd_prev[5] !== outrd_expected_prev[5] )
		&& ((outrd_expected_prev[5] !== last_outrd_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrd_expected_prev);
		$display ("     Real value = %b", outrd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outrd_exp[5] = outrd_expected_prev[5];
	end
	if (
		( outrd_expected_prev[6] !== 1'bx ) && ( outrd_prev[6] !== outrd_expected_prev[6] )
		&& ((outrd_expected_prev[6] !== last_outrd_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrd_expected_prev);
		$display ("     Real value = %b", outrd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outrd_exp[6] = outrd_expected_prev[6];
	end
	if (
		( outrd_expected_prev[7] !== 1'bx ) && ( outrd_prev[7] !== outrd_expected_prev[7] )
		&& ((outrd_expected_prev[7] !== last_outrd_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrd[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrd_expected_prev);
		$display ("     Real value = %b", outrd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outrd_exp[7] = outrd_expected_prev[7];
	end
	if (
		( outrs_expected_prev[0] !== 1'bx ) && ( outrs_prev[0] !== outrs_expected_prev[0] )
		&& ((outrs_expected_prev[0] !== last_outrs_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrs_expected_prev);
		$display ("     Real value = %b", outrs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outrs_exp[0] = outrs_expected_prev[0];
	end
	if (
		( outrs_expected_prev[1] !== 1'bx ) && ( outrs_prev[1] !== outrs_expected_prev[1] )
		&& ((outrs_expected_prev[1] !== last_outrs_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrs_expected_prev);
		$display ("     Real value = %b", outrs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outrs_exp[1] = outrs_expected_prev[1];
	end
	if (
		( outrs_expected_prev[2] !== 1'bx ) && ( outrs_prev[2] !== outrs_expected_prev[2] )
		&& ((outrs_expected_prev[2] !== last_outrs_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrs_expected_prev);
		$display ("     Real value = %b", outrs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outrs_exp[2] = outrs_expected_prev[2];
	end
	if (
		( outrs_expected_prev[3] !== 1'bx ) && ( outrs_prev[3] !== outrs_expected_prev[3] )
		&& ((outrs_expected_prev[3] !== last_outrs_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrs_expected_prev);
		$display ("     Real value = %b", outrs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outrs_exp[3] = outrs_expected_prev[3];
	end
	if (
		( outrs_expected_prev[4] !== 1'bx ) && ( outrs_prev[4] !== outrs_expected_prev[4] )
		&& ((outrs_expected_prev[4] !== last_outrs_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrs[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrs_expected_prev);
		$display ("     Real value = %b", outrs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outrs_exp[4] = outrs_expected_prev[4];
	end
	if (
		( outrs_expected_prev[5] !== 1'bx ) && ( outrs_prev[5] !== outrs_expected_prev[5] )
		&& ((outrs_expected_prev[5] !== last_outrs_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrs[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrs_expected_prev);
		$display ("     Real value = %b", outrs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outrs_exp[5] = outrs_expected_prev[5];
	end
	if (
		( outrs_expected_prev[6] !== 1'bx ) && ( outrs_prev[6] !== outrs_expected_prev[6] )
		&& ((outrs_expected_prev[6] !== last_outrs_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrs[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrs_expected_prev);
		$display ("     Real value = %b", outrs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outrs_exp[6] = outrs_expected_prev[6];
	end
	if (
		( outrs_expected_prev[7] !== 1'bx ) && ( outrs_prev[7] !== outrs_expected_prev[7] )
		&& ((outrs_expected_prev[7] !== last_outrs_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrs[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrs_expected_prev);
		$display ("     Real value = %b", outrs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outrs_exp[7] = outrs_expected_prev[7];
	end
	if (
		( outrt_expected_prev[0] !== 1'bx ) && ( outrt_prev[0] !== outrt_expected_prev[0] )
		&& ((outrt_expected_prev[0] !== last_outrt_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrt_expected_prev);
		$display ("     Real value = %b", outrt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outrt_exp[0] = outrt_expected_prev[0];
	end
	if (
		( outrt_expected_prev[1] !== 1'bx ) && ( outrt_prev[1] !== outrt_expected_prev[1] )
		&& ((outrt_expected_prev[1] !== last_outrt_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrt_expected_prev);
		$display ("     Real value = %b", outrt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outrt_exp[1] = outrt_expected_prev[1];
	end
	if (
		( outrt_expected_prev[2] !== 1'bx ) && ( outrt_prev[2] !== outrt_expected_prev[2] )
		&& ((outrt_expected_prev[2] !== last_outrt_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrt_expected_prev);
		$display ("     Real value = %b", outrt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outrt_exp[2] = outrt_expected_prev[2];
	end
	if (
		( outrt_expected_prev[3] !== 1'bx ) && ( outrt_prev[3] !== outrt_expected_prev[3] )
		&& ((outrt_expected_prev[3] !== last_outrt_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrt_expected_prev);
		$display ("     Real value = %b", outrt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outrt_exp[3] = outrt_expected_prev[3];
	end
	if (
		( outrt_expected_prev[4] !== 1'bx ) && ( outrt_prev[4] !== outrt_expected_prev[4] )
		&& ((outrt_expected_prev[4] !== last_outrt_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrt_expected_prev);
		$display ("     Real value = %b", outrt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outrt_exp[4] = outrt_expected_prev[4];
	end
	if (
		( outrt_expected_prev[5] !== 1'bx ) && ( outrt_prev[5] !== outrt_expected_prev[5] )
		&& ((outrt_expected_prev[5] !== last_outrt_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrt_expected_prev);
		$display ("     Real value = %b", outrt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outrt_exp[5] = outrt_expected_prev[5];
	end
	if (
		( outrt_expected_prev[6] !== 1'bx ) && ( outrt_prev[6] !== outrt_expected_prev[6] )
		&& ((outrt_expected_prev[6] !== last_outrt_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrt_expected_prev);
		$display ("     Real value = %b", outrt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outrt_exp[6] = outrt_expected_prev[6];
	end
	if (
		( outrt_expected_prev[7] !== 1'bx ) && ( outrt_prev[7] !== outrt_expected_prev[7] )
		&& ((outrt_expected_prev[7] !== last_outrt_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outrt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outrt_expected_prev);
		$display ("     Real value = %b", outrt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outrt_exp[7] = outrt_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module IR_v1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [15:0] instruccion;
reg irwrite;
reg oeir;
// wires                                               
wire [3:0] opcode;
wire [7:0] outjump;
wire [7:0] outrd;
wire [7:0] outrs;
wire [7:0] outrt;

wire sampler;                             

// assign statements (if any)                          
IR_v1 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.instruccion(instruccion),
	.irwrite(irwrite),
	.oeir(oeir),
	.opcode(opcode),
	.outjump(outjump),
	.outrd(outrd),
	.outrs(outrs),
	.outrt(outrt)
);

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 
// instruccion[ 15 ]
initial
begin
	instruccion[15] = 1'b0;
end 
// instruccion[ 14 ]
initial
begin
	instruccion[14] = 1'b0;
end 
// instruccion[ 13 ]
initial
begin
	instruccion[13] = 1'b1;
end 
// instruccion[ 12 ]
initial
begin
	instruccion[12] = 1'b0;
end 
// instruccion[ 11 ]
initial
begin
	instruccion[11] = 1'b0;
end 
// instruccion[ 10 ]
initial
begin
	instruccion[10] = 1'b0;
end 
// instruccion[ 9 ]
initial
begin
	instruccion[9] = 1'b0;
end 
// instruccion[ 8 ]
initial
begin
	instruccion[8] = 1'b0;
end 
// instruccion[ 7 ]
initial
begin
	instruccion[7] = 1'b0;
end 
// instruccion[ 6 ]
initial
begin
	instruccion[6] = 1'b0;
end 
// instruccion[ 5 ]
initial
begin
	instruccion[5] = 1'b1;
end 
// instruccion[ 4 ]
initial
begin
	instruccion[4] = 1'b0;
end 
// instruccion[ 3 ]
initial
begin
	instruccion[3] = 1'b0;
end 
// instruccion[ 2 ]
initial
begin
	instruccion[2] = 1'b0;
end 
// instruccion[ 1 ]
initial
begin
	instruccion[1] = 1'b1;
end 
// instruccion[ 0 ]
initial
begin
	instruccion[0] = 1'b1;
end 

// irwrite
initial
begin
	irwrite = 1'b0;
end 

// oeir
initial
begin
	oeir = 1'b0;
end 

IR_v1_vlg_sample_tst tb_sample (
	.clk(clk),
	.instruccion(instruccion),
	.irwrite(irwrite),
	.oeir(oeir),
	.sampler_tx(sampler)
);

IR_v1_vlg_check_tst tb_out(
	.opcode(opcode),
	.outjump(outjump),
	.outrd(outrd),
	.outrs(outrs),
	.outrt(outrt),
	.sampler_rx(sampler)
);
endmodule

