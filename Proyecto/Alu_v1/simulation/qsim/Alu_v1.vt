// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/20/2018 16:31:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Alu_v1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Alu_v1_vlg_sample_tst(
	A,
	B,
	C,
	OPCODE,
	sampler_tx
);
input [15:0] A;
input [15:0] B;
input [15:0] C;
input [3:0] OPCODE;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or OPCODE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Alu_v1_vlg_check_tst (
	Branch,
	RESUL,
	sampler_rx
);
input  Branch;
input [15:0] RESUL;
input sampler_rx;

reg  Branch_expected;
reg [15:0] RESUL_expected;

reg  Branch_prev;
reg [15:0] RESUL_prev;

reg  Branch_expected_prev;
reg [15:0] RESUL_expected_prev;

reg  last_Branch_exp;
reg [15:0] last_RESUL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Branch_prev = Branch;
	RESUL_prev = RESUL;
end

// update expected /o prevs

always @(trigger)
begin
	Branch_expected_prev = Branch_expected;
	RESUL_expected_prev = RESUL_expected;
end



// expected Branch
initial
begin
	Branch_expected = 1'bX;
end 
// expected RESUL[ 15 ]
initial
begin
	RESUL_expected[15] = 1'b0;
end 
// expected RESUL[ 14 ]
initial
begin
	RESUL_expected[14] = 1'b0;
end 
// expected RESUL[ 13 ]
initial
begin
	RESUL_expected[13] = 1'b0;
end 
// expected RESUL[ 12 ]
initial
begin
	RESUL_expected[12] = 1'b0;
end 
// expected RESUL[ 11 ]
initial
begin
	RESUL_expected[11] = 1'b0;
end 
// expected RESUL[ 10 ]
initial
begin
	RESUL_expected[10] = 1'b0;
end 
// expected RESUL[ 9 ]
initial
begin
	RESUL_expected[9] = 1'b0;
end 
// expected RESUL[ 8 ]
initial
begin
	RESUL_expected[8] = 1'b0;
end 
// expected RESUL[ 7 ]
initial
begin
	RESUL_expected[7] = 1'b0;
end 
// expected RESUL[ 6 ]
initial
begin
	RESUL_expected[6] = 1'b0;
end 
// expected RESUL[ 5 ]
initial
begin
	RESUL_expected[5] = 1'b0;
end 
// expected RESUL[ 4 ]
initial
begin
	RESUL_expected[4] = 1'b0;
end 
// expected RESUL[ 3 ]
initial
begin
	RESUL_expected[3] = 1'b0;
end 
// expected RESUL[ 2 ]
initial
begin
	RESUL_expected[2] = 1'b0;
end 
// expected RESUL[ 1 ]
initial
begin
	RESUL_expected[1] = 1'b0;
end 
// expected RESUL[ 0 ]
initial
begin
	RESUL_expected[0] = 1'b0;
end 
// generate trigger
always @(Branch_expected or Branch or RESUL_expected or RESUL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Branch = %b | expected RESUL = %b | ",Branch_expected_prev,RESUL_expected_prev);
	$display("| real Branch = %b | real RESUL = %b | ",Branch_prev,RESUL_prev);
`endif
	if (
		( Branch_expected_prev !== 1'bx ) && ( Branch_prev !== Branch_expected_prev )
		&& ((Branch_expected_prev !== last_Branch_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Branch_expected_prev);
		$display ("     Real value = %b", Branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Branch_exp = Branch_expected_prev;
	end
	if (
		( RESUL_expected_prev[0] !== 1'bx ) && ( RESUL_prev[0] !== RESUL_expected_prev[0] )
		&& ((RESUL_expected_prev[0] !== last_RESUL_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[0] = RESUL_expected_prev[0];
	end
	if (
		( RESUL_expected_prev[1] !== 1'bx ) && ( RESUL_prev[1] !== RESUL_expected_prev[1] )
		&& ((RESUL_expected_prev[1] !== last_RESUL_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[1] = RESUL_expected_prev[1];
	end
	if (
		( RESUL_expected_prev[2] !== 1'bx ) && ( RESUL_prev[2] !== RESUL_expected_prev[2] )
		&& ((RESUL_expected_prev[2] !== last_RESUL_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[2] = RESUL_expected_prev[2];
	end
	if (
		( RESUL_expected_prev[3] !== 1'bx ) && ( RESUL_prev[3] !== RESUL_expected_prev[3] )
		&& ((RESUL_expected_prev[3] !== last_RESUL_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[3] = RESUL_expected_prev[3];
	end
	if (
		( RESUL_expected_prev[4] !== 1'bx ) && ( RESUL_prev[4] !== RESUL_expected_prev[4] )
		&& ((RESUL_expected_prev[4] !== last_RESUL_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[4] = RESUL_expected_prev[4];
	end
	if (
		( RESUL_expected_prev[5] !== 1'bx ) && ( RESUL_prev[5] !== RESUL_expected_prev[5] )
		&& ((RESUL_expected_prev[5] !== last_RESUL_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[5] = RESUL_expected_prev[5];
	end
	if (
		( RESUL_expected_prev[6] !== 1'bx ) && ( RESUL_prev[6] !== RESUL_expected_prev[6] )
		&& ((RESUL_expected_prev[6] !== last_RESUL_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[6] = RESUL_expected_prev[6];
	end
	if (
		( RESUL_expected_prev[7] !== 1'bx ) && ( RESUL_prev[7] !== RESUL_expected_prev[7] )
		&& ((RESUL_expected_prev[7] !== last_RESUL_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[7] = RESUL_expected_prev[7];
	end
	if (
		( RESUL_expected_prev[8] !== 1'bx ) && ( RESUL_prev[8] !== RESUL_expected_prev[8] )
		&& ((RESUL_expected_prev[8] !== last_RESUL_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[8] = RESUL_expected_prev[8];
	end
	if (
		( RESUL_expected_prev[9] !== 1'bx ) && ( RESUL_prev[9] !== RESUL_expected_prev[9] )
		&& ((RESUL_expected_prev[9] !== last_RESUL_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[9] = RESUL_expected_prev[9];
	end
	if (
		( RESUL_expected_prev[10] !== 1'bx ) && ( RESUL_prev[10] !== RESUL_expected_prev[10] )
		&& ((RESUL_expected_prev[10] !== last_RESUL_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[10] = RESUL_expected_prev[10];
	end
	if (
		( RESUL_expected_prev[11] !== 1'bx ) && ( RESUL_prev[11] !== RESUL_expected_prev[11] )
		&& ((RESUL_expected_prev[11] !== last_RESUL_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[11] = RESUL_expected_prev[11];
	end
	if (
		( RESUL_expected_prev[12] !== 1'bx ) && ( RESUL_prev[12] !== RESUL_expected_prev[12] )
		&& ((RESUL_expected_prev[12] !== last_RESUL_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[12] = RESUL_expected_prev[12];
	end
	if (
		( RESUL_expected_prev[13] !== 1'bx ) && ( RESUL_prev[13] !== RESUL_expected_prev[13] )
		&& ((RESUL_expected_prev[13] !== last_RESUL_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[13] = RESUL_expected_prev[13];
	end
	if (
		( RESUL_expected_prev[14] !== 1'bx ) && ( RESUL_prev[14] !== RESUL_expected_prev[14] )
		&& ((RESUL_expected_prev[14] !== last_RESUL_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[14] = RESUL_expected_prev[14];
	end
	if (
		( RESUL_expected_prev[15] !== 1'bx ) && ( RESUL_prev[15] !== RESUL_expected_prev[15] )
		&& ((RESUL_expected_prev[15] !== last_RESUL_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RESUL[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RESUL_expected_prev);
		$display ("     Real value = %b", RESUL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RESUL_exp[15] = RESUL_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Alu_v1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A;
reg [15:0] B;
reg [15:0] C;
reg [3:0] OPCODE;
// wires                                               
wire Branch;
wire [15:0] RESUL;

wire sampler;                             

// assign statements (if any)                          
Alu_v1 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Branch(Branch),
	.C(C),
	.OPCODE(OPCODE),
	.RESUL(RESUL)
);
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #960000 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #480000 1'b1;
	A[4] = #480000 1'b0;
end 
// A[ 3 ]
initial
begin
	repeat(2)
	begin
		A[3] = 1'b0;
		A[3] = #240000 1'b1;
		# 240000;
	end
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	repeat(4)
	begin
		A[2] = 1'b0;
		A[2] = #120000 1'b1;
		# 120000;
	end
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	repeat(8)
	begin
		A[1] = 1'b0;
		A[1] = #60000 1'b1;
		# 60000;
	end
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	repeat(16)
	begin
		A[0] = 1'b0;
		A[0] = #30000 1'b1;
		# 30000;
	end
	A[0] = 1'b0;
	A[0] = #30000 1'b1;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
	B[5] = #640000 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
	B[4] = #320000 1'b1;
	B[4] = #320000 1'b0;
	B[4] = #320000 1'b1;
end 
// B[ 3 ]
initial
begin
	repeat(3)
	begin
		B[3] = 1'b0;
		B[3] = #160000 1'b1;
		# 160000;
	end
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	repeat(6)
	begin
		B[2] = 1'b0;
		B[2] = #80000 1'b1;
		# 80000;
	end
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	repeat(12)
	begin
		B[1] = 1'b0;
		B[1] = #40000 1'b1;
		# 40000;
	end
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 
// OPCODE[ 3 ]
initial
begin
	OPCODE[3] = 1'b1;
end 
// OPCODE[ 2 ]
initial
begin
	OPCODE[2] = 1'b0;
end 
// OPCODE[ 1 ]
initial
begin
	OPCODE[1] = 1'b0;
end 
// OPCODE[ 0 ]
initial
begin
	OPCODE[0] = 1'b1;
end 
// C[ 15 ]
initial
begin
	C[15] = 1'b0;
end 
// C[ 14 ]
initial
begin
	C[14] = 1'b0;
end 
// C[ 13 ]
initial
begin
	C[13] = 1'b0;
end 
// C[ 12 ]
initial
begin
	C[12] = 1'b0;
end 
// C[ 11 ]
initial
begin
	C[11] = 1'b0;
end 
// C[ 10 ]
initial
begin
	C[10] = 1'b0;
end 
// C[ 9 ]
initial
begin
	C[9] = 1'b0;
end 
// C[ 8 ]
initial
begin
	C[8] = 1'b0;
end 
// C[ 7 ]
initial
begin
	C[7] = 1'b0;
end 
// C[ 6 ]
initial
begin
	C[6] = 1'b0;
end 
// C[ 5 ]
initial
begin
	C[5] = 1'b0;
end 
// C[ 4 ]
initial
begin
	C[4] = 1'b0;
end 
// C[ 3 ]
initial
begin
	C[3] = 1'b0;
end 
// C[ 2 ]
initial
begin
	C[2] = 1'b1;
end 
// C[ 1 ]
initial
begin
	C[1] = 1'b0;
end 
// C[ 0 ]
initial
begin
	C[0] = 1'b1;
end 

Alu_v1_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.OPCODE(OPCODE),
	.sampler_tx(sampler)
);

Alu_v1_vlg_check_tst tb_out(
	.Branch(Branch),
	.RESUL(RESUL),
	.sampler_rx(sampler)
);
endmodule

