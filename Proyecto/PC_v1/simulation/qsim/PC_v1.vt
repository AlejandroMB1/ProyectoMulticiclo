// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/20/2018 17:45:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PC_v1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PC_v1_vlg_sample_tst(
	clk,
	MuxPc,
	PcSig,
	sampler_tx
);
input  clk;
input [7:0] MuxPc;
input  PcSig;
output sampler_tx;

reg sample;
time current_time;
always @(clk or MuxPc or PcSig)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PC_v1_vlg_check_tst (
	PcOut,
	sampler_rx
);
input [15:0] PcOut;
input sampler_rx;

reg [15:0] PcOut_expected;

reg [15:0] PcOut_prev;

reg [15:0] PcOut_expected_prev;

reg [15:0] last_PcOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	PcOut_prev = PcOut;
end

// update expected /o prevs

always @(trigger)
begin
	PcOut_expected_prev = PcOut_expected;
end


// expected PcOut[ 15 ]
initial
begin
	PcOut_expected[15] = 1'b0;
end 
// expected PcOut[ 14 ]
initial
begin
	PcOut_expected[14] = 1'b0;
end 
// expected PcOut[ 13 ]
initial
begin
	PcOut_expected[13] = 1'b0;
end 
// expected PcOut[ 12 ]
initial
begin
	PcOut_expected[12] = 1'b0;
end 
// expected PcOut[ 11 ]
initial
begin
	PcOut_expected[11] = 1'b0;
end 
// expected PcOut[ 10 ]
initial
begin
	PcOut_expected[10] = 1'b0;
end 
// expected PcOut[ 9 ]
initial
begin
	PcOut_expected[9] = 1'b0;
end 
// expected PcOut[ 8 ]
initial
begin
	PcOut_expected[8] = 1'b0;
end 
// expected PcOut[ 7 ]
initial
begin
	PcOut_expected[7] = 1'b0;
end 
// expected PcOut[ 6 ]
initial
begin
	PcOut_expected[6] = 1'b0;
end 
// expected PcOut[ 5 ]
initial
begin
	PcOut_expected[5] = 1'b0;
end 
// expected PcOut[ 4 ]
initial
begin
	PcOut_expected[4] = 1'b0;
end 
// expected PcOut[ 3 ]
initial
begin
	PcOut_expected[3] = 1'b0;
end 
// expected PcOut[ 2 ]
initial
begin
	PcOut_expected[2] = 1'b0;
end 
// expected PcOut[ 1 ]
initial
begin
	PcOut_expected[1] = 1'b0;
end 
// expected PcOut[ 0 ]
initial
begin
	PcOut_expected[0] = 1'b0;
end 
// generate trigger
always @(PcOut_expected or PcOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected PcOut = %b | ",PcOut_expected_prev);
	$display("| real PcOut = %b | ",PcOut_prev);
`endif
	if (
		( PcOut_expected_prev[0] !== 1'bx ) && ( PcOut_prev[0] !== PcOut_expected_prev[0] )
		&& ((PcOut_expected_prev[0] !== last_PcOut_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[0] = PcOut_expected_prev[0];
	end
	if (
		( PcOut_expected_prev[1] !== 1'bx ) && ( PcOut_prev[1] !== PcOut_expected_prev[1] )
		&& ((PcOut_expected_prev[1] !== last_PcOut_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[1] = PcOut_expected_prev[1];
	end
	if (
		( PcOut_expected_prev[2] !== 1'bx ) && ( PcOut_prev[2] !== PcOut_expected_prev[2] )
		&& ((PcOut_expected_prev[2] !== last_PcOut_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[2] = PcOut_expected_prev[2];
	end
	if (
		( PcOut_expected_prev[3] !== 1'bx ) && ( PcOut_prev[3] !== PcOut_expected_prev[3] )
		&& ((PcOut_expected_prev[3] !== last_PcOut_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[3] = PcOut_expected_prev[3];
	end
	if (
		( PcOut_expected_prev[4] !== 1'bx ) && ( PcOut_prev[4] !== PcOut_expected_prev[4] )
		&& ((PcOut_expected_prev[4] !== last_PcOut_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[4] = PcOut_expected_prev[4];
	end
	if (
		( PcOut_expected_prev[5] !== 1'bx ) && ( PcOut_prev[5] !== PcOut_expected_prev[5] )
		&& ((PcOut_expected_prev[5] !== last_PcOut_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[5] = PcOut_expected_prev[5];
	end
	if (
		( PcOut_expected_prev[6] !== 1'bx ) && ( PcOut_prev[6] !== PcOut_expected_prev[6] )
		&& ((PcOut_expected_prev[6] !== last_PcOut_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[6] = PcOut_expected_prev[6];
	end
	if (
		( PcOut_expected_prev[7] !== 1'bx ) && ( PcOut_prev[7] !== PcOut_expected_prev[7] )
		&& ((PcOut_expected_prev[7] !== last_PcOut_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[7] = PcOut_expected_prev[7];
	end
	if (
		( PcOut_expected_prev[8] !== 1'bx ) && ( PcOut_prev[8] !== PcOut_expected_prev[8] )
		&& ((PcOut_expected_prev[8] !== last_PcOut_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[8] = PcOut_expected_prev[8];
	end
	if (
		( PcOut_expected_prev[9] !== 1'bx ) && ( PcOut_prev[9] !== PcOut_expected_prev[9] )
		&& ((PcOut_expected_prev[9] !== last_PcOut_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[9] = PcOut_expected_prev[9];
	end
	if (
		( PcOut_expected_prev[10] !== 1'bx ) && ( PcOut_prev[10] !== PcOut_expected_prev[10] )
		&& ((PcOut_expected_prev[10] !== last_PcOut_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[10] = PcOut_expected_prev[10];
	end
	if (
		( PcOut_expected_prev[11] !== 1'bx ) && ( PcOut_prev[11] !== PcOut_expected_prev[11] )
		&& ((PcOut_expected_prev[11] !== last_PcOut_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[11] = PcOut_expected_prev[11];
	end
	if (
		( PcOut_expected_prev[12] !== 1'bx ) && ( PcOut_prev[12] !== PcOut_expected_prev[12] )
		&& ((PcOut_expected_prev[12] !== last_PcOut_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[12] = PcOut_expected_prev[12];
	end
	if (
		( PcOut_expected_prev[13] !== 1'bx ) && ( PcOut_prev[13] !== PcOut_expected_prev[13] )
		&& ((PcOut_expected_prev[13] !== last_PcOut_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[13] = PcOut_expected_prev[13];
	end
	if (
		( PcOut_expected_prev[14] !== 1'bx ) && ( PcOut_prev[14] !== PcOut_expected_prev[14] )
		&& ((PcOut_expected_prev[14] !== last_PcOut_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[14] = PcOut_expected_prev[14];
	end
	if (
		( PcOut_expected_prev[15] !== 1'bx ) && ( PcOut_prev[15] !== PcOut_expected_prev[15] )
		&& ((PcOut_expected_prev[15] !== last_PcOut_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_PcOut_exp[15] = PcOut_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PC_v1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] MuxPc;
reg PcSig;
// wires                                               
wire [15:0] PcOut;

wire sampler;                             

// assign statements (if any)                          
PC_v1 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.MuxPc(MuxPc),
	.PcOut(PcOut),
	.PcSig(PcSig)
);

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 
// MuxPc[ 7 ]
initial
begin
	MuxPc[7] = 1'b0;
end 
// MuxPc[ 6 ]
initial
begin
	MuxPc[6] = 1'b0;
end 
// MuxPc[ 5 ]
initial
begin
	MuxPc[5] = 1'b0;
end 
// MuxPc[ 4 ]
initial
begin
	MuxPc[4] = 1'b0;
	MuxPc[4] = #880000 1'b1;
end 
// MuxPc[ 3 ]
initial
begin
	MuxPc[3] = 1'b0;
	MuxPc[3] = #240000 1'b1;
	MuxPc[3] = #640000 1'b0;
end 
// MuxPc[ 2 ]
initial
begin
	MuxPc[2] = 1'b1;
	MuxPc[2] = #240000 1'b0;
	MuxPc[2] = #320000 1'b1;
	MuxPc[2] = #320000 1'b0;
end 
// MuxPc[ 1 ]
initial
begin
	MuxPc[1] = 1'b0;
	# 80000;
	repeat(2)
	begin
		MuxPc[1] = 1'b1;
		MuxPc[1] = #160000 1'b0;
		# 160000;
	end
	MuxPc[1] = 1'b1;
	MuxPc[1] = #160000 1'b0;
end 
// MuxPc[ 0 ]
initial
begin
	repeat(6)
	begin
		MuxPc[0] = 1'b1;
		MuxPc[0] = #80000 1'b0;
		# 80000;
	end
	MuxPc[0] = 1'b1;
end 

// PcSig
initial
begin
	repeat(6)
	begin
		PcSig = 1'b0;
		PcSig = #80000 1'b1;
		# 80000;
	end
	PcSig = 1'b0;
end 

PC_v1_vlg_sample_tst tb_sample (
	.clk(clk),
	.MuxPc(MuxPc),
	.PcSig(PcSig),
	.sampler_tx(sampler)
);

PC_v1_vlg_check_tst tb_out(
	.PcOut(PcOut),
	.sampler_rx(sampler)
);
endmodule

